/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CollectorService {

  public interface Iface {

    public void addMetricRecord(List<org.cloumon.thrift.MetricRecord> metricRecords) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addMetricRecord(List<org.cloumon.thrift.MetricRecord> metricRecords, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addMetricRecord_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addMetricRecord(List<org.cloumon.thrift.MetricRecord> metricRecords) throws org.apache.thrift.TException
    {
      send_addMetricRecord(metricRecords);
      recv_addMetricRecord();
    }

    public void send_addMetricRecord(List<org.cloumon.thrift.MetricRecord> metricRecords) throws org.apache.thrift.TException
    {
      addMetricRecord_args args = new addMetricRecord_args();
      args.setMetricRecords(metricRecords);
      sendBase("addMetricRecord", args);
    }

    public void recv_addMetricRecord() throws org.apache.thrift.TException
    {
      addMetricRecord_result result = new addMetricRecord_result();
      receiveBase(result, "addMetricRecord");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMetricRecord(List<org.cloumon.thrift.MetricRecord> metricRecords, org.apache.thrift.async.AsyncMethodCallback<addMetricRecord_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMetricRecord_call method_call = new addMetricRecord_call(metricRecords, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addMetricRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<org.cloumon.thrift.MetricRecord> metricRecords;
      public addMetricRecord_call(List<org.cloumon.thrift.MetricRecord> metricRecords, org.apache.thrift.async.AsyncMethodCallback<addMetricRecord_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metricRecords = metricRecords;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMetricRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMetricRecord_args args = new addMetricRecord_args();
        args.setMetricRecords(metricRecords);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addMetricRecord();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMetricRecord", new addMetricRecord());
      return processMap;
    }

    private static class addMetricRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMetricRecord_args> {
      public addMetricRecord() {
        super("addMetricRecord");
      }

      protected addMetricRecord_args getEmptyArgsInstance() {
        return new addMetricRecord_args();
      }

      protected addMetricRecord_result getResult(I iface, addMetricRecord_args args) throws org.apache.thrift.TException {
        addMetricRecord_result result = new addMetricRecord_result();
        iface.addMetricRecord(args.metricRecords);
        return result;
      }
    }

  }

  public static class addMetricRecord_args implements org.apache.thrift.TBase<addMetricRecord_args, addMetricRecord_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMetricRecord_args");

    private static final org.apache.thrift.protocol.TField METRIC_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("metricRecords", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<org.cloumon.thrift.MetricRecord> metricRecords;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METRIC_RECORDS((short)1, "metricRecords");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METRIC_RECORDS
            return METRIC_RECORDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METRIC_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("metricRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MetricRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMetricRecord_args.class, metaDataMap);
    }

    public addMetricRecord_args() {
    }

    public addMetricRecord_args(
      List<org.cloumon.thrift.MetricRecord> metricRecords)
    {
      this();
      this.metricRecords = metricRecords;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMetricRecord_args(addMetricRecord_args other) {
      if (other.isSetMetricRecords()) {
        List<org.cloumon.thrift.MetricRecord> __this__metricRecords = new ArrayList<org.cloumon.thrift.MetricRecord>();
        for (org.cloumon.thrift.MetricRecord other_element : other.metricRecords) {
          __this__metricRecords.add(new org.cloumon.thrift.MetricRecord(other_element));
        }
        this.metricRecords = __this__metricRecords;
      }
    }

    public addMetricRecord_args deepCopy() {
      return new addMetricRecord_args(this);
    }

    @Override
    public void clear() {
      this.metricRecords = null;
    }

    public int getMetricRecordsSize() {
      return (this.metricRecords == null) ? 0 : this.metricRecords.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MetricRecord> getMetricRecordsIterator() {
      return (this.metricRecords == null) ? null : this.metricRecords.iterator();
    }

    public void addToMetricRecords(org.cloumon.thrift.MetricRecord elem) {
      if (this.metricRecords == null) {
        this.metricRecords = new ArrayList<org.cloumon.thrift.MetricRecord>();
      }
      this.metricRecords.add(elem);
    }

    public List<org.cloumon.thrift.MetricRecord> getMetricRecords() {
      return this.metricRecords;
    }

    public addMetricRecord_args setMetricRecords(List<org.cloumon.thrift.MetricRecord> metricRecords) {
      this.metricRecords = metricRecords;
      return this;
    }

    public void unsetMetricRecords() {
      this.metricRecords = null;
    }

    /** Returns true if field metricRecords is set (has been assigned a value) and false otherwise */
    public boolean isSetMetricRecords() {
      return this.metricRecords != null;
    }

    public void setMetricRecordsIsSet(boolean value) {
      if (!value) {
        this.metricRecords = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case METRIC_RECORDS:
        if (value == null) {
          unsetMetricRecords();
        } else {
          setMetricRecords((List<org.cloumon.thrift.MetricRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case METRIC_RECORDS:
        return getMetricRecords();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case METRIC_RECORDS:
        return isSetMetricRecords();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMetricRecord_args)
        return this.equals((addMetricRecord_args)that);
      return false;
    }

    public boolean equals(addMetricRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_metricRecords = true && this.isSetMetricRecords();
      boolean that_present_metricRecords = true && that.isSetMetricRecords();
      if (this_present_metricRecords || that_present_metricRecords) {
        if (!(this_present_metricRecords && that_present_metricRecords))
          return false;
        if (!this.metricRecords.equals(that.metricRecords))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMetricRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMetricRecord_args typedOther = (addMetricRecord_args)other;

      lastComparison = Boolean.valueOf(isSetMetricRecords()).compareTo(typedOther.isSetMetricRecords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetricRecords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricRecords, typedOther.metricRecords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // METRIC_RECORDS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                this.metricRecords = new ArrayList<org.cloumon.thrift.MetricRecord>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  org.cloumon.thrift.MetricRecord _elem2;
                  _elem2 = new org.cloumon.thrift.MetricRecord();
                  _elem2.read(iprot);
                  this.metricRecords.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.metricRecords != null) {
        oprot.writeFieldBegin(METRIC_RECORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.metricRecords.size()));
          for (org.cloumon.thrift.MetricRecord _iter3 : this.metricRecords)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMetricRecord_args(");
      boolean first = true;

      sb.append("metricRecords:");
      if (this.metricRecords == null) {
        sb.append("null");
      } else {
        sb.append(this.metricRecords);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addMetricRecord_result implements org.apache.thrift.TBase<addMetricRecord_result, addMetricRecord_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMetricRecord_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMetricRecord_result.class, metaDataMap);
    }

    public addMetricRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMetricRecord_result(addMetricRecord_result other) {
    }

    public addMetricRecord_result deepCopy() {
      return new addMetricRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMetricRecord_result)
        return this.equals((addMetricRecord_result)that);
      return false;
    }

    public boolean equals(addMetricRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMetricRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMetricRecord_result typedOther = (addMetricRecord_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMetricRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
