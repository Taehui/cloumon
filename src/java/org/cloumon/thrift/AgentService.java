/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AgentService {

  public interface Iface {

    public void addMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addMonitorItems_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException
    {
      send_addMonitorItems(monitorItems);
      recv_addMonitorItems();
    }

    public void send_addMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException
    {
      addMonitorItems_args args = new addMonitorItems_args();
      args.setMonitorItems(monitorItems);
      sendBase("addMonitorItems", args);
    }

    public void recv_addMonitorItems() throws org.apache.thrift.TException
    {
      addMonitorItems_result result = new addMonitorItems_result();
      receiveBase(result, "addMonitorItems");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<addMonitorItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMonitorItems_call method_call = new addMonitorItems_call(monitorItems, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addMonitorItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<org.cloumon.thrift.MonitorItem> monitorItems;
      public addMonitorItems_call(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<addMonitorItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItems = monitorItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMonitorItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMonitorItems_args args = new addMonitorItems_args();
        args.setMonitorItems(monitorItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addMonitorItems();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMonitorItems", new addMonitorItems());
      return processMap;
    }

    private static class addMonitorItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMonitorItems_args> {
      public addMonitorItems() {
        super("addMonitorItems");
      }

      protected addMonitorItems_args getEmptyArgsInstance() {
        return new addMonitorItems_args();
      }

      protected addMonitorItems_result getResult(I iface, addMonitorItems_args args) throws org.apache.thrift.TException {
        addMonitorItems_result result = new addMonitorItems_result();
        iface.addMonitorItems(args.monitorItems);
        return result;
      }
    }

  }

  public static class addMonitorItems_args implements org.apache.thrift.TBase<addMonitorItems_args, addMonitorItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMonitorItems_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItems", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<org.cloumon.thrift.MonitorItem> monitorItems;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEMS((short)1, "monitorItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEMS
            return MONITOR_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("monitorItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMonitorItems_args.class, metaDataMap);
    }

    public addMonitorItems_args() {
    }

    public addMonitorItems_args(
      List<org.cloumon.thrift.MonitorItem> monitorItems)
    {
      this();
      this.monitorItems = monitorItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMonitorItems_args(addMonitorItems_args other) {
      if (other.isSetMonitorItems()) {
        List<org.cloumon.thrift.MonitorItem> __this__monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>();
        for (org.cloumon.thrift.MonitorItem other_element : other.monitorItems) {
          __this__monitorItems.add(new org.cloumon.thrift.MonitorItem(other_element));
        }
        this.monitorItems = __this__monitorItems;
      }
    }

    public addMonitorItems_args deepCopy() {
      return new addMonitorItems_args(this);
    }

    @Override
    public void clear() {
      this.monitorItems = null;
    }

    public int getMonitorItemsSize() {
      return (this.monitorItems == null) ? 0 : this.monitorItems.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MonitorItem> getMonitorItemsIterator() {
      return (this.monitorItems == null) ? null : this.monitorItems.iterator();
    }

    public void addToMonitorItems(org.cloumon.thrift.MonitorItem elem) {
      if (this.monitorItems == null) {
        this.monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>();
      }
      this.monitorItems.add(elem);
    }

    public List<org.cloumon.thrift.MonitorItem> getMonitorItems() {
      return this.monitorItems;
    }

    public addMonitorItems_args setMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems) {
      this.monitorItems = monitorItems;
      return this;
    }

    public void unsetMonitorItems() {
      this.monitorItems = null;
    }

    /** Returns true if field monitorItems is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItems() {
      return this.monitorItems != null;
    }

    public void setMonitorItemsIsSet(boolean value) {
      if (!value) {
        this.monitorItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEMS:
        if (value == null) {
          unsetMonitorItems();
        } else {
          setMonitorItems((List<org.cloumon.thrift.MonitorItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEMS:
        return getMonitorItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEMS:
        return isSetMonitorItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMonitorItems_args)
        return this.equals((addMonitorItems_args)that);
      return false;
    }

    public boolean equals(addMonitorItems_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItems = true && this.isSetMonitorItems();
      boolean that_present_monitorItems = true && that.isSetMonitorItems();
      if (this_present_monitorItems || that_present_monitorItems) {
        if (!(this_present_monitorItems && that_present_monitorItems))
          return false;
        if (!this.monitorItems.equals(that.monitorItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMonitorItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMonitorItems_args typedOther = (addMonitorItems_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItems()).compareTo(typedOther.isSetMonitorItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItems, typedOther.monitorItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEMS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                this.monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  org.cloumon.thrift.MonitorItem _elem2;
                  _elem2 = new org.cloumon.thrift.MonitorItem();
                  _elem2.read(iprot);
                  this.monitorItems.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItems != null) {
        oprot.writeFieldBegin(MONITOR_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.monitorItems.size()));
          for (org.cloumon.thrift.MonitorItem _iter3 : this.monitorItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMonitorItems_args(");
      boolean first = true;

      sb.append("monitorItems:");
      if (this.monitorItems == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addMonitorItems_result implements org.apache.thrift.TBase<addMonitorItems_result, addMonitorItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMonitorItems_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMonitorItems_result.class, metaDataMap);
    }

    public addMonitorItems_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMonitorItems_result(addMonitorItems_result other) {
    }

    public addMonitorItems_result deepCopy() {
      return new addMonitorItems_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMonitorItems_result)
        return this.equals((addMonitorItems_result)that);
      return false;
    }

    public boolean equals(addMonitorItems_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMonitorItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMonitorItems_result typedOther = (addMonitorItems_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMonitorItems_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
